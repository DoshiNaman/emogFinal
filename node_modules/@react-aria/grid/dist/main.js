var {
  focusSafely,
  getFocusableTreeWalker
} = require("@react-aria/focus");

var {
  usePress,
  isFocusVisible
} = require("@react-aria/interactions");

var {
  useSelectableCollection,
  useSelectableItem
} = require("@react-aria/selection");

var {
  useCollator,
  useLocale,
  useMessageFormatter
} = require("@react-aria/i18n");

var {
  useMemo,
  useRef
} = require("react");

var {
  filterDOMProps,
  mergeProps,
  useId,
  useUpdateEffect
} = require("@react-aria/utils");

var {
  announce
} = require("@react-aria/live-announcer");

var _babelRuntimeHelpersInteropRequireDefault = $parcel$interopDefault(require("@babel/runtime/helpers/interopRequireDefault"));

var _babelRuntimeHelpersExtends = $parcel$interopDefault(require("@babel/runtime/helpers/extends"));

var {
  Rect
} = require("@react-stately/virtualizer");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

class GridKeyboardDelegate {
  constructor(options) {
    this.collection = void 0;
    this.disabledKeys = void 0;
    this.ref = void 0;
    this.direction = void 0;
    this.collator = void 0;
    this.layout = void 0;
    this.focusMode = void 0;
    this.collection = options.collection;
    this.disabledKeys = options.disabledKeys;
    this.ref = options.ref;
    this.direction = options.direction;
    this.collator = options.collator;
    this.layout = options.layout;
    this.focusMode = options.focusMode || 'row';
  }

  isCell(node) {
    return node.type === 'cell';
  }

  isRow(node) {
    return node.type === 'row' || node.type === 'item';
  }

  findPreviousKey(fromKey, pred) {
    let key = fromKey != null ? this.collection.getKeyBefore(fromKey) : this.collection.getLastKey();

    while (key != null) {
      let item = this.collection.getItem(key);

      if (!pred || pred(item)) {
        return key;
      }

      key = this.collection.getKeyBefore(key);
    }
  }

  findNextKey(fromKey, pred) {
    let key = fromKey != null ? this.collection.getKeyAfter(fromKey) : this.collection.getFirstKey();

    while (key != null) {
      let item = this.collection.getItem(key);

      if (!pred || pred(item)) {
        return key;
      }

      key = this.collection.getKeyAfter(key);
    }
  }

  getKeyBelow(key) {
    let startItem = this.collection.getItem(key);

    if (!startItem) {
      return;
    } // If focus was on a cell, start searching from the parent row


    if (this.isCell(startItem)) {
      key = startItem.parentKey;
    } // Find the next item


    key = this.findNextKey(key);

    if (key != null) {
      // If focus was on a cell, focus the cell with the same index in the next row.
      if (this.isCell(startItem)) {
        let item = this.collection.getItem(key);
        return [...item.childNodes][startItem.index].key;
      } // Otherwise, focus the next row


      if (this.focusMode === 'row') {
        return key;
      }
    }
  }

  getKeyAbove(key) {
    let startItem = this.collection.getItem(key);

    if (!startItem) {
      return;
    } // If focus is on a cell, start searching from the parent row


    if (this.isCell(startItem)) {
      key = startItem.parentKey;
    } // Find the previous item


    key = this.findPreviousKey(key);

    if (key != null) {
      // If focus was on a cell, focus the cell with the same index in the previous row.
      if (this.isCell(startItem)) {
        let item = this.collection.getItem(key);
        return [...item.childNodes][startItem.index].key;
      } // Otherwise, focus the previous row


      if (this.focusMode === 'row') {
        return key;
      }
    }
  }

  getKeyRightOf(key) {
    let item = this.collection.getItem(key);

    if (!item) {
      return;
    } // If focus is on a row, focus the first child cell.


    if (this.isRow(item)) {
      let children = [...item.childNodes];
      return this.direction === 'rtl' ? children[children.length - 1].key : children[0].key;
    } // If focus is on a cell, focus the next cell if any,
    // otherwise focus the parent row.


    if (this.isCell(item)) {
      let parent = this.collection.getItem(item.parentKey);
      let children = [...parent.childNodes];
      let next = this.direction === 'rtl' ? children[item.index - 1] : children[item.index + 1];

      if (next) {
        return next.key;
      } // focus row only if focusMode is set to row


      if (this.focusMode === 'row') {
        return item.parentKey;
      }

      return this.direction === 'rtl' ? this.getFirstKey(key) : this.getLastKey(key);
    }
  }

  getKeyLeftOf(key) {
    let item = this.collection.getItem(key);

    if (!item) {
      return;
    } // If focus is on a row, focus the last child cell.


    if (this.isRow(item)) {
      let children = [...item.childNodes];
      return this.direction === 'rtl' ? children[0].key : children[children.length - 1].key;
    } // If focus is on a cell, focus the previous cell if any,
    // otherwise focus the parent row.


    if (this.isCell(item)) {
      let parent = this.collection.getItem(item.parentKey);
      let children = [...parent.childNodes];
      let prev = this.direction === 'rtl' ? children[item.index + 1] : children[item.index - 1];

      if (prev) {
        return prev.key;
      } // focus row only if focusMode is set to row


      if (this.focusMode === 'row') {
        return item.parentKey;
      }

      return this.direction === 'rtl' ? this.getLastKey(key) : this.getFirstKey(key);
    }
  }

  getFirstKey(key, global) {
    let item;

    if (key != null) {
      item = this.collection.getItem(key);

      if (!item) {
        return;
      } // If global flag is not set, and a cell is currently focused,
      // move focus to the first cell in the parent row.


      if (this.isCell(item) && !global) {
        let parent = this.collection.getItem(item.parentKey);
        return [...parent.childNodes][0].key;
      }
    } // Find the first row


    key = this.findNextKey(); // If global flag is set (or if focus mode is cell), focus the first cell in the first row.

    if (key != null && item && this.isCell(item) && global || this.focusMode === 'cell') {
      let item = this.collection.getItem(key);
      key = [...item.childNodes][0].key;
    } // Otherwise, focus the row itself.


    return key;
  }

  getLastKey(key, global) {
    let item;

    if (key != null) {
      item = this.collection.getItem(key);

      if (!item) {
        return;
      } // If global flag is not set, and a cell is currently focused,
      // move focus to the last cell in the parent row.


      if (this.isCell(item) && !global) {
        let parent = this.collection.getItem(item.parentKey);
        let children = [...parent.childNodes];
        return children[children.length - 1].key;
      }
    } // Find the last row


    key = this.findPreviousKey(); // If global flag is set (or if focus mode is cell), focus the last cell in the last row.

    if (key != null && item && this.isCell(item) && global || this.focusMode === 'cell') {
      let item = this.collection.getItem(key);
      let children = [...item.childNodes];
      key = children[children.length - 1].key;
    } // Otherwise, focus the row itself.


    return key;
  }

  getItem(key) {
    return this.ref.current.querySelector("[data-key=\"" + key + "\"]");
  }

  getItemRect(key) {
    if (this.layout) {
      var _this$layout$getLayou;

      return (_this$layout$getLayou = this.layout.getLayoutInfo(key)) == null ? void 0 : _this$layout$getLayou.rect;
    }

    let item = this.getItem(key);

    if (item) {
      return new Rect(item.offsetLeft, item.offsetTop, item.offsetWidth, item.offsetHeight);
    }
  }

  getPageHeight() {
    var _this$ref, _this$ref$current;

    if (this.layout) {
      var _this$layout$virtuali;

      return (_this$layout$virtuali = this.layout.virtualizer) == null ? void 0 : _this$layout$virtuali.visibleRect.height;
    }

    return (_this$ref = this.ref) == null ? void 0 : (_this$ref$current = _this$ref.current) == null ? void 0 : _this$ref$current.offsetHeight;
  }

  getContentHeight() {
    var _this$ref2, _this$ref2$current;

    if (this.layout) {
      return this.layout.getContentSize().height;
    }

    return (_this$ref2 = this.ref) == null ? void 0 : (_this$ref2$current = _this$ref2.current) == null ? void 0 : _this$ref2$current.scrollHeight;
  }

  getKeyPageAbove(key) {
    let itemRect = this.getItemRect(key);

    if (!itemRect) {
      return null;
    }

    let pageY = Math.max(0, itemRect.maxY - this.getPageHeight());

    while (itemRect && itemRect.y > pageY) {
      key = this.getKeyAbove(key);
      itemRect = this.getItemRect(key);
    }

    return key;
  }

  getKeyPageBelow(key) {
    let itemRect = this.getItemRect(key);

    if (!itemRect) {
      return null;
    }

    let pageHeight = this.getPageHeight();
    let pageY = Math.min(this.getContentHeight(), itemRect.y + pageHeight);

    while (itemRect && itemRect.maxY < pageY) {
      let nextKey = this.getKeyBelow(key);
      itemRect = this.getItemRect(nextKey); // Guard against case where maxY of the last key is barely less than pageY due to rounding
      // and thus it attempts to set key to null

      if (nextKey != null) {
        key = nextKey;
      }
    }

    return key;
  }

  getKeyForSearch(search, fromKey) {
    if (!this.collator) {
      return null;
    }

    let collection = this.collection;
    let key = fromKey != null ? fromKey : this.getFirstKey(); // If the starting key is a cell, search from its parent row.

    let startItem = collection.getItem(key);

    if (startItem.type === 'cell') {
      key = startItem.parentKey;
    }

    let hasWrapped = false;

    while (key != null) {
      let item = collection.getItem(key); // check row text value for match

      if (item.textValue) {
        let substring = item.textValue.slice(0, search.length);

        if (this.collator.compare(substring, search) === 0) {
          if (this.isRow(item) && this.focusMode === 'cell') {
            return [...item.childNodes][0].key;
          }

          return item.key;
        }
      }

      key = this.findNextKey(key); // Wrap around when reaching the end of the collection

      if (key == null && !hasWrapped) {
        key = this.getFirstKey();
        hasWrapped = true;
      }
    }

    return null;
  }

}

exports.GridKeyboardDelegate = GridKeyboardDelegate;

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// Used to share keyboard delegate between useGrid and useGridCell
const $e6fd609a4e1bd40f6df88a69c08b6746$export$gridKeyboardDelegates = new WeakMap();
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/ar-AE.json
var $f3b5d97e587eba8802fd35463efc40f1$exports = {};
$f3b5d97e587eba8802fd35463efc40f1$exports = JSON.parse("{\"deselectedItem\":\"{item} غير المحدد\",\"select\":\"تحديد\",\"selectedAll\":\"جميع العناصر المحددة.\",\"selectedCount\":\"{count, plural, =0 {لم يتم تحديد عناصر} one {# عنصر محدد} other {# عنصر محدد}}.\",\"selectedItem\":\"{item} المحدد\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/bg-BG.json
var $e8c0938d9ab8b794bba35bee62bd9c11$exports = {};
$e8c0938d9ab8b794bba35bee62bd9c11$exports = JSON.parse("{\"deselectedItem\":\"{item} не е избран.\",\"select\":\"Изберете\",\"selectedAll\":\"Всички елементи са избрани.\",\"selectedCount\":\"{count, plural, =0 {Няма избрани елементи} one {# избран елемент} other {# избрани елементи}}.\",\"selectedItem\":\"{item} избран.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/cs-CZ.json
var $e0c07c292996cdb1b27080a59c7cb52$exports = {};
$e0c07c292996cdb1b27080a59c7cb52$exports = JSON.parse("{\"deselectedItem\":\"Položka {item} není vybrána.\",\"select\":\"Vybrat\",\"selectedAll\":\"Vybrány všechny položky.\",\"selectedCount\":\"{count, plural, =0 {Nevybrány žádné položky} one {Vybrána # položka} other {Vybráno # položek}}.\",\"selectedItem\":\"Vybrána položka {item}.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/da-DK.json
var $e0001ed7150af4085e51c274889a03c$exports = {};
$e0001ed7150af4085e51c274889a03c$exports = JSON.parse("{\"deselectedItem\":\"{item} ikke valgt.\",\"select\":\"Vælg\",\"selectedAll\":\"Alle elementer valgt.\",\"selectedCount\":\"{count, plural, =0 {Ingen elementer valgt} one {# element valgt} other {# elementer valgt}}.\",\"selectedItem\":\"{item} valgt.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/de-DE.json
var $de9f1470f80ba9cf38b8a75bb6c$exports = {};
$de9f1470f80ba9cf38b8a75bb6c$exports = JSON.parse("{\"deselectedItem\":\"{item} nicht ausgewählt.\",\"select\":\"Auswählen\",\"selectedAll\":\"Alle Elemente ausgewählt.\",\"selectedCount\":\"{count, plural, =0 {Keine Elemente ausgewählt} one {# Element ausgewählt} other {# Elemente ausgewählt}}.\",\"selectedItem\":\"{item} ausgewählt.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/el-GR.json
var $cfe35bac79961e38f4df4a0e0cb09a04$exports = {};
$cfe35bac79961e38f4df4a0e0cb09a04$exports = JSON.parse("{\"deselectedItem\":\"Δεν επιλέχθηκε το στοιχείο {item}.\",\"select\":\"Επιλογή\",\"selectedAll\":\"Επιλέχθηκαν όλα τα στοιχεία.\",\"selectedCount\":\"{count, plural, =0 {Δεν επιλέχθηκαν στοιχεία} one {Επιλέχθηκε # στοιχείο} other {Επιλέχθηκαν # στοιχεία}}.\",\"selectedItem\":\"Επιλέχθηκε το στοιχείο {item}.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/en-US.json
var $d13b1ea919d49253cf46bbc8c5ad0e4f$exports = {};
$d13b1ea919d49253cf46bbc8c5ad0e4f$exports = JSON.parse("{\"deselectedItem\":\"{item} not selected.\",\"select\":\"Select\",\"selectedCount\":\"{count, plural, =0 {No items selected} one {# item selected} other {# items selected}}.\",\"selectedAll\":\"All items selected.\",\"selectedItem\":\"{item} selected.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/es-ES.json
var $d864b563ed6cd09263653205fa183$exports = {};
$d864b563ed6cd09263653205fa183$exports = JSON.parse("{\"deselectedItem\":\"{item} no seleccionado.\",\"select\":\"Seleccionar\",\"selectedAll\":\"Todos los elementos seleccionados.\",\"selectedCount\":\"{count, plural, =0 {Ningún elemento seleccionado} one {# elemento seleccionado} other {# elementos seleccionados}}.\",\"selectedItem\":\"{item} seleccionado.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/et-EE.json
var $b14dc42d725c1febe581f4260531b766$exports = {};
$b14dc42d725c1febe581f4260531b766$exports = JSON.parse("{\"deselectedItem\":\"{item} pole valitud.\",\"select\":\"Vali\",\"selectedAll\":\"Kõik üksused valitud.\",\"selectedCount\":\"{count, plural, =0 {Üksusi pole valitud} one {# üksus valitud} other {# üksust valitud}}.\",\"selectedItem\":\"{item} valitud.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/fi-FI.json
var $c9a09657efdb048bfac0187444$exports = {};
$c9a09657efdb048bfac0187444$exports = JSON.parse("{\"deselectedItem\":\"Kohdetta {item} ei valittu.\",\"select\":\"Valitse\",\"selectedAll\":\"Kaikki kohteet valittu.\",\"selectedCount\":\"{count, plural, =0 {Ei yhtään kohdetta valittu} one {# kohde valittu} other {# kohdetta valittu}}.\",\"selectedItem\":\"{item} valittu.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/fr-FR.json
var $ea4502238114a4fa77247e11c71dbff$exports = {};
$ea4502238114a4fa77247e11c71dbff$exports = JSON.parse("{\"deselectedItem\":\"{item} non sélectionné.\",\"select\":\"Sélectionner\",\"selectedAll\":\"Tous les éléments sélectionnés.\",\"selectedCount\":\"{count, plural, =0 {Aucun élément sélectionné} one {# élément sélectionné} other {# éléments sélectionnés}}.\",\"selectedItem\":\"{item} sélectionné.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/he-IL.json
var $d9581c305462587058c0342a58677c4$exports = {};
$d9581c305462587058c0342a58677c4$exports = JSON.parse("{\"deselectedItem\":\"{item} לא נבחר.\",\"select\":\"בחר\",\"selectedAll\":\"כל הפריטים נבחרו.\",\"selectedCount\":\"{count, plural, =0 {לא נבחרו פריטים} one {פריט # נבחר} other {# פריטים נבחרו}}.\",\"selectedItem\":\"{item} נבחר.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/hr-HR.json
var $cf734ac19e86322b877e98c049038b$exports = {};
$cf734ac19e86322b877e98c049038b$exports = JSON.parse("{\"deselectedItem\":\"Stavka {item} nije odabrana.\",\"select\":\"Odaberite\",\"selectedAll\":\"Odabrane su sve stavke.\",\"selectedCount\":\"{count, plural, =0 {Nije odabrana nijedna stavka} one {Odabrana je # stavka} other {Odabrano je # stavki}}.\",\"selectedItem\":\"Stavka {item} je odabrana.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/hu-HU.json
var $f521190239da9bcdf17fc30078c36$exports = {};
$f521190239da9bcdf17fc30078c36$exports = JSON.parse("{\"deselectedItem\":\"{item} nincs kijelölve.\",\"select\":\"Kijelölés\",\"selectedAll\":\"Az összes elem kijelölve.\",\"selectedCount\":\"{count, plural, =0 {Egy elem sincs kijelölve} one {# elem kijelölve} other {# elem kijelölve}}.\",\"selectedItem\":\"{item} kijelölve.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/it-IT.json
var $c65d722333d791beced80b55e56cac2b$exports = {};
$c65d722333d791beced80b55e56cac2b$exports = JSON.parse("{\"deselectedItem\":\"{item} non selezionato.\",\"select\":\"Seleziona\",\"selectedAll\":\"Tutti gli elementi selezionati.\",\"selectedCount\":\"{count, plural, =0 {Nessun elemento selezionato} one {# elemento selezionato} other {# elementi selezionati}}.\",\"selectedItem\":\"{item} selezionato.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/ja-JP.json
var $bf77eedec4eb77f0361d68c3e1f9ed34$exports = {};
$bf77eedec4eb77f0361d68c3e1f9ed34$exports = JSON.parse("{\"deselectedItem\":\"{item} が選択されていません。\",\"select\":\"選択\",\"selectedAll\":\"すべての項目を選択しました。\",\"selectedCount\":\"{count, plural, =0 {項目が選択されていません} one {# 項目を選択しました} other {# 項目を選択しました}}。\",\"selectedItem\":\"{item} を選択しました。\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/ko-KR.json
var $fc5ca332cebd040bdaa0cf9b999553$exports = {};
$fc5ca332cebd040bdaa0cf9b999553$exports = JSON.parse("{\"deselectedItem\":\"{item}이(가) 선택되지 않았습니다.\",\"select\":\"선택\",\"selectedAll\":\"모든 항목이 선택되었습니다.\",\"selectedCount\":\"{count, plural, =0 {선택된 항목이 없습니다} one {#개 항목이 선택되었습니다} other {#개 항목이 선택되었습니다}}.\",\"selectedItem\":\"{item}이(가) 선택되었습니다.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/lt-LT.json
var $f136c7b53ddb1ccb2cf52b596649$exports = {};
$f136c7b53ddb1ccb2cf52b596649$exports = JSON.parse("{\"deselectedItem\":\"{item} nepasirinkta.\",\"select\":\"Pasirinkti\",\"selectedAll\":\"Pasirinkti visi elementai.\",\"selectedCount\":\"{count, plural, =0 {Nepasirinktas nė vienas elementas} one {Pasirinktas # elementas} other {Pasirinkta elementų: #}}.\",\"selectedItem\":\"Pasirinkta: {item}.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/lv-LV.json
var $da0bf35340be57c92d4bdcc180dbfdc2$exports = {};
$da0bf35340be57c92d4bdcc180dbfdc2$exports = JSON.parse("{\"deselectedItem\":\"Vienums {item} nav atlasīts.\",\"select\":\"Atlasīt\",\"selectedAll\":\"Atlasīti visi vienumi.\",\"selectedCount\":\"{count, plural, =0 {Nav atlasīts neviens vienums} one {Atlasīto vienumu skaits: #} other {Atlasīto vienumu skaits: #}}.\",\"selectedItem\":\"Atlasīts vienums {item}.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/nb-NO.json
var $d83a2220a3634302170e36cb127a436$exports = {};
$d83a2220a3634302170e36cb127a436$exports = JSON.parse("{\"deselectedItem\":\"{item} er ikke valgt.\",\"select\":\"Velg\",\"selectedAll\":\"Alle elementer er valgt.\",\"selectedCount\":\"{count, plural, =0 {Ingen elementer er valgt} one {# element er valgt} other {# elementer er valgt}}.\",\"selectedItem\":\"{item} er valgt.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/nl-NL.json
var $c3f2334868ddbe62c3cddc9f73c66da0$exports = {};
$c3f2334868ddbe62c3cddc9f73c66da0$exports = JSON.parse("{\"deselectedItem\":\"{item} niet geselecteerd.\",\"select\":\"Selecteren\",\"selectedAll\":\"Alle items geselecteerd.\",\"selectedCount\":\"{count, plural, =0 {Geen items geselecteerd} one {# item geselecteerd} other {# items geselecteerd}}.\",\"selectedItem\":\"{item} geselecteerd.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/pl-PL.json
var $a03437156244244be9a419900d98$exports = {};
$a03437156244244be9a419900d98$exports = JSON.parse("{\"deselectedItem\":\"Nie zaznaczono {item}.\",\"select\":\"Zaznacz\",\"selectedAll\":\"Wszystkie zaznaczone elementy.\",\"selectedCount\":\"{count, plural, =0 {Nie zaznaczono żadnych elementów} one {# zaznaczony element} other {# zaznaczonych elementów}}.\",\"selectedItem\":\"Zaznaczono {item}.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/pt-BR.json
var $b789143cc53d4555e546c675632d83bf$exports = {};
$b789143cc53d4555e546c675632d83bf$exports = JSON.parse("{\"deselectedItem\":\"{item} não selecionado.\",\"select\":\"Selecionar\",\"selectedAll\":\"Todos os itens selecionados.\",\"selectedCount\":\"{count, plural, =0 {Nenhum item selecionado} one {# item selecionado} other {# itens selecionados}}.\",\"selectedItem\":\"{item} selecionado.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/pt-PT.json
var $a15741fa76f08491470130f498dbd$exports = {};
$a15741fa76f08491470130f498dbd$exports = JSON.parse("{\"deselectedItem\":\"{item} não selecionado.\",\"select\":\"Selecionar\",\"selectedAll\":\"Todos os itens selecionados.\",\"selectedCount\":\"{count, plural, =0 {Nenhum item selecionado} one {# item selecionado} other {# itens selecionados}}.\",\"selectedItem\":\"{item} selecionado.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/ro-RO.json
var $e1a824107cd15e9ed3d2deec6e9958ea$exports = {};
$e1a824107cd15e9ed3d2deec6e9958ea$exports = JSON.parse("{\"deselectedItem\":\"{item} neselectat.\",\"select\":\"Selectare\",\"selectedAll\":\"Toate elementele selectate.\",\"selectedCount\":\"{count, plural, =0 {Niciun element selectat} one {# element selectat} other {# elemente selectate}}.\",\"selectedItem\":\"{item} selectat.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/ru-RU.json
var $bbcd18d5c3a31954c443ea06e6f$exports = {};
$bbcd18d5c3a31954c443ea06e6f$exports = JSON.parse("{\"deselectedItem\":\"{Item} не выбрано.\",\"select\":\"Выбрать\",\"selectedAll\":\"Выбраны все элементы.\",\"selectedCount\":\"{count, plural, =0 {Нет выбранных элементов} one {# элемент выбран} other {# элементов выбрано}}.\",\"selectedItem\":\"{Item} выбрано.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/sk-SK.json
var $f82152409e7266812e1afd28$exports = {};
$f82152409e7266812e1afd28$exports = JSON.parse("{\"deselectedItem\":\"Nevybraté položky: {item}.\",\"select\":\"Vybrať\",\"selectedAll\":\"Všetky vybraté položky.\",\"selectedCount\":\"{count, plural, =0 {Žiadne vybraté položky} one {# vybratá položka} other {Počet vybratých položiek:#}}.\",\"selectedItem\":\"Vybraté položky: {item}.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/sl-SI.json
var $cf441c41ac0818ad07c0beeac2a5f2a$exports = {};
$cf441c41ac0818ad07c0beeac2a5f2a$exports = JSON.parse("{\"deselectedItem\":\"Element {item} ni izbran.\",\"select\":\"Izberite\",\"selectedAll\":\"Vsi elementi so izbrani.\",\"selectedCount\":\"{count, plural, =0 {Noben element ni izbran} one {# element je izbran} other {# elementov je izbranih}}.\",\"selectedItem\":\"Element {item} je izbran.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/sr-SP.json
var $fb0afad71994f5a5770039a338cf3$exports = {};
$fb0afad71994f5a5770039a338cf3$exports = JSON.parse("{\"deselectedItem\":\"{item} nije izabrano.\",\"select\":\"Izaberite\",\"selectedAll\":\"Izabrane su sve stavke.\",\"selectedCount\":\"{count, plural, =0 {Nije izabrana nijedna stavka} one {Izabrana je # stavka} other {Izabrano je # stavki}}.\",\"selectedItem\":\"{Item} je izabrano.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/sv-SE.json
var $b27c3659a4c51ac9e7a5b961fef5ea0f$exports = {};
$b27c3659a4c51ac9e7a5b961fef5ea0f$exports = JSON.parse("{\"deselectedItem\":\"{item} ej markerat.\",\"select\":\"Markera\",\"selectedAll\":\"Alla markerade objekt.\",\"selectedCount\":\"{count, plural, =0 {Inga markerade objekt} one {# markerat objekt} other {# markerade objekt}}.\",\"selectedItem\":\"{item} markerat.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/tr-TR.json
var $d27e0624a0f68339271ed686c5180$exports = {};
$d27e0624a0f68339271ed686c5180$exports = JSON.parse("{\"deselectedItem\":\"{item} seçilmedi.\",\"select\":\"Seç\",\"selectedAll\":\"Tüm ögeler seçildi.\",\"selectedCount\":\"{count, plural, =0 {Hiçbir öge seçilmedi} one {# öge seçildi} other {# öge seçildi}}.\",\"selectedItem\":\"{item} seçildi.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/uk-UA.json
var $aff0802f4267f6a9ced1608dad094e62$exports = {};
$aff0802f4267f6a9ced1608dad094e62$exports = JSON.parse("{\"deselectedItem\":\"{item} не вибрано.\",\"select\":\"Вибрати\",\"selectedAll\":\"Усі елементи вибрано.\",\"selectedCount\":\"{count, plural, =0 {Жодних елементів не вибрано} one {# елемент вибрано} other {Вибрано елементів: #}}.\",\"selectedItem\":\"{item} вибрано.\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/zh-CN.json
var $d98ba85122b8bc7d41f49f582696f83$exports = {};
$d98ba85122b8bc7d41f49f582696f83$exports = JSON.parse("{\"deselectedItem\":\"未选择 {item}。\",\"select\":\"选择\",\"selectedAll\":\"已选择所有项目。\",\"selectedCount\":\"{count, plural, =0 {未选择项目} one {已选择 # 个项目} other {已选择 # 个项目}}。\",\"selectedItem\":\"已选择 {item}。\"}");
// ASSET: /Users/govett/dev/react-spectrum-v3/packages/@react-aria/grid/intl/zh-TW.json
var $f2661a24dc6056b2c63abea3a181b0d0$exports = {};
$f2661a24dc6056b2c63abea3a181b0d0$exports = JSON.parse("{\"deselectedItem\":\"未選取「{item}」。\",\"select\":\"選取\",\"selectedAll\":\"已選取所有項目。\",\"selectedCount\":\"{count, plural, =0 {未選取任何項目} one {已選取 # 個項目} other {已選取 # 個項目}}。\",\"selectedItem\":\"已選取「{item}」。\"}");
// @ts-ignore
const $df311f3c863e8abccff59a8ae65a46d3$var$intlMessages = {
  "ar-AE": _babelRuntimeHelpersInteropRequireDefault($f3b5d97e587eba8802fd35463efc40f1$exports).default,
  "bg-BG": _babelRuntimeHelpersInteropRequireDefault($e8c0938d9ab8b794bba35bee62bd9c11$exports).default,
  "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($e0c07c292996cdb1b27080a59c7cb52$exports).default,
  "da-DK": _babelRuntimeHelpersInteropRequireDefault($e0001ed7150af4085e51c274889a03c$exports).default,
  "de-DE": _babelRuntimeHelpersInteropRequireDefault($de9f1470f80ba9cf38b8a75bb6c$exports).default,
  "el-GR": _babelRuntimeHelpersInteropRequireDefault($cfe35bac79961e38f4df4a0e0cb09a04$exports).default,
  "en-US": _babelRuntimeHelpersInteropRequireDefault($d13b1ea919d49253cf46bbc8c5ad0e4f$exports).default,
  "es-ES": _babelRuntimeHelpersInteropRequireDefault($d864b563ed6cd09263653205fa183$exports).default,
  "et-EE": _babelRuntimeHelpersInteropRequireDefault($b14dc42d725c1febe581f4260531b766$exports).default,
  "fi-FI": _babelRuntimeHelpersInteropRequireDefault($c9a09657efdb048bfac0187444$exports).default,
  "fr-FR": _babelRuntimeHelpersInteropRequireDefault($ea4502238114a4fa77247e11c71dbff$exports).default,
  "he-IL": _babelRuntimeHelpersInteropRequireDefault($d9581c305462587058c0342a58677c4$exports).default,
  "hr-HR": _babelRuntimeHelpersInteropRequireDefault($cf734ac19e86322b877e98c049038b$exports).default,
  "hu-HU": _babelRuntimeHelpersInteropRequireDefault($f521190239da9bcdf17fc30078c36$exports).default,
  "it-IT": _babelRuntimeHelpersInteropRequireDefault($c65d722333d791beced80b55e56cac2b$exports).default,
  "ja-JP": _babelRuntimeHelpersInteropRequireDefault($bf77eedec4eb77f0361d68c3e1f9ed34$exports).default,
  "ko-KR": _babelRuntimeHelpersInteropRequireDefault($fc5ca332cebd040bdaa0cf9b999553$exports).default,
  "lt-LT": _babelRuntimeHelpersInteropRequireDefault($f136c7b53ddb1ccb2cf52b596649$exports).default,
  "lv-LV": _babelRuntimeHelpersInteropRequireDefault($da0bf35340be57c92d4bdcc180dbfdc2$exports).default,
  "nb-NO": _babelRuntimeHelpersInteropRequireDefault($d83a2220a3634302170e36cb127a436$exports).default,
  "nl-NL": _babelRuntimeHelpersInteropRequireDefault($c3f2334868ddbe62c3cddc9f73c66da0$exports).default,
  "pl-PL": _babelRuntimeHelpersInteropRequireDefault($a03437156244244be9a419900d98$exports).default,
  "pt-BR": _babelRuntimeHelpersInteropRequireDefault($b789143cc53d4555e546c675632d83bf$exports).default,
  "pt-PT": _babelRuntimeHelpersInteropRequireDefault($a15741fa76f08491470130f498dbd$exports).default,
  "ro-RO": _babelRuntimeHelpersInteropRequireDefault($e1a824107cd15e9ed3d2deec6e9958ea$exports).default,
  "ru-RU": _babelRuntimeHelpersInteropRequireDefault($bbcd18d5c3a31954c443ea06e6f$exports).default,
  "sk-SK": _babelRuntimeHelpersInteropRequireDefault($f82152409e7266812e1afd28$exports).default,
  "sl-SI": _babelRuntimeHelpersInteropRequireDefault($cf441c41ac0818ad07c0beeac2a5f2a$exports).default,
  "sr-SP": _babelRuntimeHelpersInteropRequireDefault($fb0afad71994f5a5770039a338cf3$exports).default,
  "sv-SE": _babelRuntimeHelpersInteropRequireDefault($b27c3659a4c51ac9e7a5b961fef5ea0f$exports).default,
  "tr-TR": _babelRuntimeHelpersInteropRequireDefault($d27e0624a0f68339271ed686c5180$exports).default,
  "uk-UA": _babelRuntimeHelpersInteropRequireDefault($aff0802f4267f6a9ced1608dad094e62$exports).default,
  "zh-CN": _babelRuntimeHelpersInteropRequireDefault($d98ba85122b8bc7d41f49f582696f83$exports).default,
  "zh-TW": _babelRuntimeHelpersInteropRequireDefault($f2661a24dc6056b2c63abea3a181b0d0$exports).default
};

/**
 * Provides the behavior and accessibility implementation for a grid component.
 * A grid displays data in one or more rows and columns and enables a user to navigate its contents via directional navigation keys.
 * @param props - Props for the grid.
 * @param state - State for the grid, as returned by `useGridState`.
 * @param ref - The ref attached to the grid element.
 */
function useGrid(props, state, ref) {
  let {
    isVirtualized,
    keyboardDelegate,
    focusMode,
    getRowText = key => {
      var _state$collection$get;

      return (_state$collection$get = state.collection.getItem(key)) == null ? void 0 : _state$collection$get.textValue;
    },
    scrollRef
  } = props;
  let formatMessage = useMessageFormatter($df311f3c863e8abccff59a8ae65a46d3$var$intlMessages);

  if (!props['aria-label'] && !props['aria-labelledby']) {
    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');
  } // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
  // When virtualized, the layout object will be passed in as a prop and override this.


  let collator = useCollator({
    usage: 'search',
    sensitivity: 'base'
  });
  let {
    direction
  } = useLocale();
  let delegate = useMemo(() => keyboardDelegate || new GridKeyboardDelegate({
    collection: state.collection,
    disabledKeys: state.disabledKeys,
    ref,
    direction,
    collator,
    focusMode
  }), [keyboardDelegate, state.collection, state.disabledKeys, ref, direction, collator, focusMode]);
  let {
    collectionProps
  } = useSelectableCollection({
    ref,
    selectionManager: state.selectionManager,
    keyboardDelegate: delegate,
    isVirtualized,
    scrollRef
  });
  let id = useId();
  $e6fd609a4e1bd40f6df88a69c08b6746$export$gridKeyboardDelegates.set(state, delegate);
  let domProps = filterDOMProps(props, {
    labelable: true
  });
  let gridProps = mergeProps(domProps, _babelRuntimeHelpersExtends({
    role: 'grid',
    id,
    'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined
  }, collectionProps));

  if (isVirtualized) {
    gridProps['aria-rowcount'] = state.collection.size;
    gridProps['aria-colcount'] = state.collection.columnCount;
  } // Many screen readers do not announce when items in a grid are selected/deselected.
  // We do this using an ARIA live region.


  let selection = state.selectionManager.rawSelection;
  let lastSelection = useRef(selection);
  useUpdateEffect(() => {
    if (!state.selectionManager.isFocused) {
      return;
    }

    let addedKeys = $df311f3c863e8abccff59a8ae65a46d3$var$diffSelection(selection, lastSelection.current);
    let removedKeys = $df311f3c863e8abccff59a8ae65a46d3$var$diffSelection(lastSelection.current, selection); // If adding or removing a single row from the selection, announce the name of that item.

    let messages = [];

    if (addedKeys.size === 1 && removedKeys.size === 0) {
      let addedText = getRowText(addedKeys.keys().next().value);

      if (addedText) {
        messages.push(formatMessage('selectedItem', {
          item: addedText
        }));
      }
    } else if (removedKeys.size === 1 && addedKeys.size === 0) {
      let removedText = getRowText(removedKeys.keys().next().value);

      if (removedText) {
        messages.push(formatMessage('deselectedItem', {
          item: removedText
        }));
      }
    } // Announce how many items are selected, except when selecting the first item.


    if (state.selectionManager.selectionMode === 'multiple') {
      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || lastSelection.current.size > 1) {
        messages.push(selection === 'all' ? formatMessage('selectedAll') : formatMessage('selectedCount', {
          count: selection.size
        }));
      }
    }

    if (messages.length > 0) {
      announce(messages.join(' '));
    }

    lastSelection.current = selection;
  }, [selection]);
  return {
    gridProps
  };
}

exports.useGrid = useGrid;

function $df311f3c863e8abccff59a8ae65a46d3$var$diffSelection(a, b) {
  let res = new Set();

  if (a === 'all' || b === 'all') {
    return res;
  }

  for (let key of a.keys()) {
    if (!b.has(key)) {
      res.add(key);
    }
  }

  return res;
}

/**
 * Provides the accessibility implementation for a row group in a grid.
 */
function useGridRowGroup() {
  return {
    rowGroupProps: {
      role: 'rowgroup'
    }
  };
}

exports.useGridRowGroup = useGridRowGroup;

/**
 * Provides the behavior and accessibility implementation for a row in a grid.
 * @param props - Props for the row.
 * @param state - State of the parent grid, as returned by `useGridState`.
 */
function useGridRow(props, state, ref) {
  let {
    node,
    isVirtualized,
    shouldSelectOnPressUp
  } = props;
  let {
    itemProps
  } = useSelectableItem({
    selectionManager: state.selectionManager,
    key: node.key,
    ref,
    isVirtualized,
    shouldSelectOnPressUp
  });
  let isSelected = state.selectionManager.isSelected(node.key);
  let isDisabled = state.disabledKeys.has(node.key); // TODO: move into useSelectableItem?

  let {
    pressProps
  } = usePress(_babelRuntimeHelpersExtends({}, itemProps, {
    isDisabled
  }));

  let rowProps = _babelRuntimeHelpersExtends({
    role: 'row',
    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined
  }, pressProps);

  if (isVirtualized) {
    rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based
  }

  return {
    rowProps
  };
}

exports.useGridRow = useGridRow;

/**
 * Provides the behavior and accessibility implementation for a cell in a grid.
 * @param props - Props for the cell.
 * @param state - State of the parent grid, as returned by `useGridState`.
 */
function useGridCell(props, state, ref) {
  let {
    node,
    isVirtualized,
    focusMode = 'child',
    shouldSelectOnPressUp
  } = props;
  let {
    direction
  } = useLocale();
  let keyboardDelegate = $e6fd609a4e1bd40f6df88a69c08b6746$export$gridKeyboardDelegates.get(state); // Handles focusing the cell. If there is a focusable child,
  // it is focused, otherwise the cell itself is focused.

  let focus = () => {
    let treeWalker = getFocusableTreeWalker(ref.current);

    if (focusMode === 'child') {
      let focusable = state.selectionManager.childFocusStrategy === 'last' ? $f9bcfab6f4b3fd6f2359f40ca9cd9cf4$var$last(treeWalker) : treeWalker.firstChild();

      if (focusable) {
        focusSafely(focusable);
        return;
      }
    }

    if (!ref.current.contains(document.activeElement)) {
      focusSafely(ref.current);
    }
  };

  let {
    itemProps
  } = useSelectableItem({
    selectionManager: state.selectionManager,
    key: node.key,
    ref,
    isVirtualized,
    focus,
    shouldSelectOnPressUp
  }); // TODO: move into useSelectableItem?

  let isDisabled = state.disabledKeys.has(node.key) || state.disabledKeys.has(node.parentKey);
  let {
    pressProps
  } = usePress(_babelRuntimeHelpersExtends({}, itemProps, {
    isDisabled
  }));

  let onKeyDown = e => {
    if (!e.currentTarget.contains(e.target)) {
      return;
    }

    let walker = getFocusableTreeWalker(ref.current);
    walker.currentNode = document.activeElement;

    switch (e.key) {
      case 'ArrowLeft':
        {
          // Find the next focusable element within the cell.
          let focusable = direction === 'rtl' ? walker.nextNode() : walker.previousNode(); // Don't focus the cell itself if focusMode is "child"

          if (focusMode === 'child' && focusable === ref.current) {
            focusable = null;
          }

          if (focusable) {
            e.preventDefault();
            e.stopPropagation();
            focusSafely(focusable);
          } else {
            // If there is no next focusable child, then move to the next cell to the left of this one.
            // This will be handled by useSelectableCollection. However, if there is no cell to the left
            // of this one, only one column, and the grid doesn't focus rows, then the next key will be the
            // same as this one. In that case we need to handle focusing either the cell or the first/last
            // child, depending on the focus mode.
            let prev = keyboardDelegate.getKeyLeftOf(node.key);

            if (prev !== node.key) {
              break;
            }

            e.preventDefault();
            e.stopPropagation();

            if (focusMode === 'cell' && direction === 'rtl') {
              focusSafely(ref.current);
            } else {
              walker.currentNode = ref.current;
              focusable = direction === 'rtl' ? walker.firstChild() : $f9bcfab6f4b3fd6f2359f40ca9cd9cf4$var$last(walker);

              if (focusable) {
                focusSafely(focusable);
              }
            }
          }

          break;
        }

      case 'ArrowRight':
        {
          let focusable = direction === 'rtl' ? walker.previousNode() : walker.nextNode();

          if (focusMode === 'child' && focusable === ref.current) {
            focusable = null;
          }

          if (focusable) {
            e.preventDefault();
            e.stopPropagation();
            focusSafely(focusable);
          } else {
            let next = keyboardDelegate.getKeyRightOf(node.key);

            if (next !== node.key) {
              break;
            }

            e.preventDefault();
            e.stopPropagation();

            if (focusMode === 'cell' && direction === 'ltr') {
              focusSafely(ref.current);
            } else {
              walker.currentNode = ref.current;
              focusable = direction === 'rtl' ? $f9bcfab6f4b3fd6f2359f40ca9cd9cf4$var$last(walker) : walker.firstChild();

              if (focusable) {
                focusSafely(focusable);
              }
            }
          }

          break;
        }

      case 'ArrowUp':
      case 'ArrowDown':
        // Prevent this event from reaching cell children, e.g. menu buttons. We want arrow keys to navigate
        // to the cell above/below instead. We need to re-dispatch the event from a higher parent so it still
        // bubbles and gets handled by useSelectableCollection.
        if (!e.altKey && ref.current.contains(e.target)) {
          e.stopPropagation();
          e.preventDefault();
          ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
        }

        break;
    }
  }; // Grid cells can have focusable elements inside them. In this case, focus should
  // be marshalled to that element rather than focusing the cell itself.


  let onFocus = e => {
    if (e.target !== ref.current) {
      // useSelectableItem only handles setting the focused key when
      // the focused element is the gridcell itself. We also want to
      // set the focused key when a child element receives focus.
      // If focus is currently visible (e.g. the user is navigating with the keyboard),
      // then skip this. We want to restore focus to the previously focused row/cell
      // in that case since the table should act like a single tab stop.
      if (!isFocusVisible()) {
        state.selectionManager.setFocusedKey(node.key);
      }

      return;
    } // If the cell itself is focused, wait a frame so that focus finishes propagatating
    // up to the tree, and move focus to a focusable child if possible.


    requestAnimationFrame(() => {
      if (focusMode === 'child' && document.activeElement === ref.current) {
        focus();
      }
    });
  };

  let gridCellProps = mergeProps(pressProps, {
    role: 'gridcell',
    onKeyDownCapture: onKeyDown,
    onFocus
  });

  if (isVirtualized) {
    gridCellProps['aria-colindex'] = node.index + 1; // aria-colindex is 1-based
  }

  return {
    gridCellProps
  };
}

exports.useGridCell = useGridCell;

function $f9bcfab6f4b3fd6f2359f40ca9cd9cf4$var$last(walker) {
  let next;
  let last;

  do {
    last = walker.lastChild();

    if (last) {
      next = last;
    }
  } while (last);

  return next;
}

// @ts-ignore
const $c537cf6c8526bfd541b0cefbcce955f$var$intlMessages = {
  "ar-AE": _babelRuntimeHelpersInteropRequireDefault($f3b5d97e587eba8802fd35463efc40f1$exports).default,
  "bg-BG": _babelRuntimeHelpersInteropRequireDefault($e8c0938d9ab8b794bba35bee62bd9c11$exports).default,
  "cs-CZ": _babelRuntimeHelpersInteropRequireDefault($e0c07c292996cdb1b27080a59c7cb52$exports).default,
  "da-DK": _babelRuntimeHelpersInteropRequireDefault($e0001ed7150af4085e51c274889a03c$exports).default,
  "de-DE": _babelRuntimeHelpersInteropRequireDefault($de9f1470f80ba9cf38b8a75bb6c$exports).default,
  "el-GR": _babelRuntimeHelpersInteropRequireDefault($cfe35bac79961e38f4df4a0e0cb09a04$exports).default,
  "en-US": _babelRuntimeHelpersInteropRequireDefault($d13b1ea919d49253cf46bbc8c5ad0e4f$exports).default,
  "es-ES": _babelRuntimeHelpersInteropRequireDefault($d864b563ed6cd09263653205fa183$exports).default,
  "et-EE": _babelRuntimeHelpersInteropRequireDefault($b14dc42d725c1febe581f4260531b766$exports).default,
  "fi-FI": _babelRuntimeHelpersInteropRequireDefault($c9a09657efdb048bfac0187444$exports).default,
  "fr-FR": _babelRuntimeHelpersInteropRequireDefault($ea4502238114a4fa77247e11c71dbff$exports).default,
  "he-IL": _babelRuntimeHelpersInteropRequireDefault($d9581c305462587058c0342a58677c4$exports).default,
  "hr-HR": _babelRuntimeHelpersInteropRequireDefault($cf734ac19e86322b877e98c049038b$exports).default,
  "hu-HU": _babelRuntimeHelpersInteropRequireDefault($f521190239da9bcdf17fc30078c36$exports).default,
  "it-IT": _babelRuntimeHelpersInteropRequireDefault($c65d722333d791beced80b55e56cac2b$exports).default,
  "ja-JP": _babelRuntimeHelpersInteropRequireDefault($bf77eedec4eb77f0361d68c3e1f9ed34$exports).default,
  "ko-KR": _babelRuntimeHelpersInteropRequireDefault($fc5ca332cebd040bdaa0cf9b999553$exports).default,
  "lt-LT": _babelRuntimeHelpersInteropRequireDefault($f136c7b53ddb1ccb2cf52b596649$exports).default,
  "lv-LV": _babelRuntimeHelpersInteropRequireDefault($da0bf35340be57c92d4bdcc180dbfdc2$exports).default,
  "nb-NO": _babelRuntimeHelpersInteropRequireDefault($d83a2220a3634302170e36cb127a436$exports).default,
  "nl-NL": _babelRuntimeHelpersInteropRequireDefault($c3f2334868ddbe62c3cddc9f73c66da0$exports).default,
  "pl-PL": _babelRuntimeHelpersInteropRequireDefault($a03437156244244be9a419900d98$exports).default,
  "pt-BR": _babelRuntimeHelpersInteropRequireDefault($b789143cc53d4555e546c675632d83bf$exports).default,
  "pt-PT": _babelRuntimeHelpersInteropRequireDefault($a15741fa76f08491470130f498dbd$exports).default,
  "ro-RO": _babelRuntimeHelpersInteropRequireDefault($e1a824107cd15e9ed3d2deec6e9958ea$exports).default,
  "ru-RU": _babelRuntimeHelpersInteropRequireDefault($bbcd18d5c3a31954c443ea06e6f$exports).default,
  "sk-SK": _babelRuntimeHelpersInteropRequireDefault($f82152409e7266812e1afd28$exports).default,
  "sl-SI": _babelRuntimeHelpersInteropRequireDefault($cf441c41ac0818ad07c0beeac2a5f2a$exports).default,
  "sr-SP": _babelRuntimeHelpersInteropRequireDefault($fb0afad71994f5a5770039a338cf3$exports).default,
  "sv-SE": _babelRuntimeHelpersInteropRequireDefault($b27c3659a4c51ac9e7a5b961fef5ea0f$exports).default,
  "tr-TR": _babelRuntimeHelpersInteropRequireDefault($d27e0624a0f68339271ed686c5180$exports).default,
  "uk-UA": _babelRuntimeHelpersInteropRequireDefault($aff0802f4267f6a9ced1608dad094e62$exports).default,
  "zh-CN": _babelRuntimeHelpersInteropRequireDefault($d98ba85122b8bc7d41f49f582696f83$exports).default,
  "zh-TW": _babelRuntimeHelpersInteropRequireDefault($f2661a24dc6056b2c63abea3a181b0d0$exports).default
};

/**
 * Provides the behavior and accessibility implementation for a selection checkbox in a grid.
 * @param props - Props for the selection checkbox.
 * @param state - State of the grid, as returned by `useGridState`.
 */
function useGridSelectionCheckbox(props, state) {
  let {
    key
  } = props;
  let manager = state.selectionManager;
  let checkboxId = useId();
  let isDisabled = state.disabledKeys.has(key);
  let isSelected = state.selectionManager.isSelected(key);

  let onChange = () => manager.select(key);

  const formatMessage = useMessageFormatter($c537cf6c8526bfd541b0cefbcce955f$var$intlMessages);
  return {
    checkboxProps: {
      id: checkboxId,
      'aria-label': formatMessage('select'),
      isSelected,
      isDisabled: isDisabled || manager.selectionMode === 'none',
      onChange
    }
  };
}

exports.useGridSelectionCheckbox = useGridSelectionCheckbox;
//# sourceMappingURL=main.js.map
